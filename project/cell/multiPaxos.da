# vim: tabst    op=8 expandtab shiftwidth=4 softtabstop=4 filetype=python
from random import randint
from time import sleep
import sys
NOPS = 10

class KeepAliveP(DistProcess):
       
       def setup(replicas,timetosleep,lcount,lleadid,lparent):
           output("called set up of KeepAliveP")
           leadid = lleadid
           #count =  lcount
           count = 1
           parent = lparent
           isLeader = True
           counter = 1
           testcounter = 0 # test case : smooth hand over
           
       def keepAlive():
           if(isLeader):
                #--yielda
                output("Sending KeepAlive from KeepAliveP with values "+(str(counter)))
                send(KeepAlive(counter,leadid,self),replicas)
                output("returning after send")
                counter = counter + count
                #--yieldb
                testcounter = testcounter  + 1
                sleep(2)
                if testcounter > 7:
                    isLeader = False
               
                return False
           else:
                output("In the bloody false")
                return True

       def Ondie(nleadid,newleader):
           print('\n\n')
           output("In die of KeepAliveP") 
           print('\n\n')
           send(Die(nleadid,newleader),parent)
           isLeader = False
       
       def main():
           await(keepAlive())
          
class HeartBeatP(DistProcess):
    def setup(replicas, lleaderid,lmyid,lthresh,lparent):
        NCELLS =3
        t_s = 4
        current = 0
        failcount = 0
        myparent = lparent
        leaderid = lleaderid
        myid = lmyid
        threshold = 5 #lthresh
        if(myid > leaderid):
            distance = (myid - leaderid) % NCELLS
        else :
            distance = (myid + NCELLS - leaderid) % NCELLS
    def main():
        heartBeat()
        await(False or heartBeat())
        
    def heartBeat():
        sleep(2)
        send(HeartBeat(self),myparent)
     
    def OnreplyPulse(counter,lleaderid,klproc,myreplicaid):
        #output("reply pulse received")
        if(myreplicaid == lleaderid):
            output("replica id is equal to lleaderid in HeartBeatP")
            return
        if(leaderid == lleaderid):
            if(current >= counter):
                if(current == counter):
                    output("========counter and current equal====",counter)
                output("***received a counter with stale count**"+str(counter)+" "+str(current)+"from")
                output("the current failcount is "+str(failcount)+" thresh"+str(distance*threshold))
                # check fail count.
                failcount = failcount + 1
                if(failcount > distance*threshold):
                    output("sending lead the heard to my parent")
                    failcount = 0
                    send(leadTheHeard(),myparent)             
            else:
                failcount = 0
                output("received a counter with count "+str(counter))
                current = counter
                             
        else:
            # CELEBRATE!! THE SAVIOUR IS BORN!! :) NEW LEADER
            leaderid = lleaderid
            current = counter
            failcount = 0
            if(myid > leaderid):
                distance = (myid - leaderid) % NCELLS
            else :
                distance = (myid + NCELLS - leaderid) % NCELLS
            
class Replica(DistProcess):
    
    def setup(acceptors,replicas,initial_state,myself,lmyid):
        myid = lmyid
        initialized = False
        leader = None
        leaderid = 1
        isLeader = False
        counter = 0
        state, slot_num = initial_state, 1
        proposals, decisions = set(), set()
        lastklproc = None
        
        if (myid == 1):
            leader = spawn(Leader,[acceptors, replicas,self,myid])
            isLeader = True       
            
            
    def OnleadTheHeard():
        leader = spawn(Leader,[acceptors, replicas,self,myid])
        print(" the new leader is ")
        output(leader)
        isLeader = True
        leaderAnnounce()
        #tell Heartbeat that I am the leader
            
    def OnKeepAlive(lcounter,lleaderid,klproc):
        output("received keep alive with counter as "+str(lcounter))
        lastklproc = klproc
        # checreplicas,k whether the message is from the current leader
        if not (leaderid == lleaderid):
            output("**********new leader id detected*********")
            output("sending die to original leader***********")
            send(die(leaderid,leader),klproc)
            return
        # check the counter if the counter is older one ignore
        if(counter > lcounter):
            # do nothing
            output("received keep alive with counter as "+lcounter)
            temp = 1
        else:
            output("assgning new counter values in REplica")
            counter = lcounter
            
    def OnHeartBeat(hbp):
        #output("Received Heart beat " )
        send(replyPulse(counter,leaderid,lastklproc,myid),hbp)
    def main():
        if(lmyid == 1):
            leaderAnnounce()
            await(yieldandReturnFalse())
        else:
            await(yieldandReturnFalse())
    
    def yieldandReturnFalse():
        a = 1
        a= a + 2
        a= a + 3
        sleep(1)
        return False
        
    def OnleadDie(newleadid,newleader):
        if not(newleadid == leaderid):
            output("anomoly detected.. onleadDie:newleadid,leadid differ")
        if not(newleader == leader):    
            output("anomoly detected.. onleadDie:newleadid,leadid differ")
    def leaderAnnounce():
            send(LeaderIAm(leader,myid),replicas)
        
    def operations(op):
        llock = op % 5;
        oper = op %2 ;
        ffile = "file".join(str(llock))
        state[ffile] = oper
        
    def OnLeaderIAm(leader1,leadid):
        if(isLeader):
            send(Die(leader1,leadid),leader)
            isLeader = False # some one else is the leader    
        leader = leader1
        hb = spawn(HeartBeatP,[replicas, leadid,myid,10,self])     
        sleep(2) # stabilize .. 
        output("I am told this is my leader"+str(leader));    
    
    def propose(p):
        if not {s for (s, p1) in decisions if p1 == p}:
            maxs = max({0} |
                       set(s for (s,p1) in proposals) |
                       set(s for (s,p1) in decisions))
            s1 = min(s for s in range(1, maxs + 1 + 1)
                     if not (set(p1 for (s0, p1) in proposals if s0 == s) |
                             set(p1 for (s0, p1) in decisions if s0 == s)))
            proposals.add((s1, p))
            
            send(Propose(s1, p), leader)

    def perform(p):
        k, cid, op = p
        if {s for (s, p0) in decisions if p0 == p and s < slot_num}:
            slot_num += 1
        else:              
            operations(op)
            result = state
            slot_num = slot_num + 1
            send(Completed(slot_num),leader)
            send(Response(cid, result), k)   
  
    def OnRequest(p):
        propose(p)

    def OnDecision(s, p):
        decisions.add((s,p))
        while {p1 for (s0,p1) in decisions if s0==slot_num}:
            p1 = {p1 for (s0,p1) in decisions if s0==slot_num}.pop()
            for p2 in {p2 for (s0,p2) in proposals if s0==slot_num if p2 != p1}:
                propose(p2)
            perform(p1)

class Leader(DistProcess):
    def setup(acceptors,replicas,parent,myid):
        ballot_num = randint(0,500)
        ballot_num = ballot_num % 30 
        gc_collector = {} # a slot and count of number of leaders 
                          # that completed it 
        active = False
        proposals = set()
        slot_num = 0
        myparent = parent
        nreplicas = len(replicas)
        leadlock = True # this is the leader lock
        isLeader = True
        
            
    def OnDie(newleadid,newleader):
        print("\n\n")
        output(self)
        print("I am dieing....  as new leadid is "+str(newleadid))
        print("\n\n")
        isLeader = False
        send(leadDie(newleadid,newleader),parent)
        
    def main():
        spawn(Scout, [self, acceptors, ballot_num,slot_num])
        spawn(KeepAliveP,[replicas,5,1,myid,self])
        await(yieldandCheckIfLeader())
        
    def yieldandCheckIfLeader():      
         a = 0
         a = a + 1
         sleep(1)
         if not(isLeader):
             output("I am no more the leader")
         return  not(isLeader)
  
    def OnPropose(s, p):
        
        if not {p1 for (s1, p1) in proposals if s1 == s}:
            proposals.add((s,p))
            if active:
                spawn(Commander, [self, acceptors, replicas, (ballot_num, s, p)])
        leadlock = True
       
    def OnAdopted(ballot_num_, pvals):
        if ballot_num == ballot_num_:
            proposals = circle_plus(proposals, pmax(pvals))
            for (s, p) in proposals:
                spawn(Commander, [self, acceptors, replicas, (ballot_num, s, p)])
            active = True
        #output(" I am adopted "+str(ballot_num))

    def OnDecided(slot):
        #output(" this slot was decided "+str(slot))
        slot_num = slot
    
    def OnCompleted(slot):
        #output("this slot was completed : "+str(slot))
        if slot in gc_collector:
            count = gc_collector[slot]
            if(count == nreplicas-1):
                del gc_collector[slot]
                #output("GC collecting slot "+str(slot))            
                send(GcCollect(slot),acceptors)
            else:
                gc_collector[slot] = count+1
        else:
                gc_collector[slot] = 1
    def OnPreempted(b):
        r1 = b
        active = False
        ballot_num = r1+1
        spawn(Scout, [self, acceptors, ballot_num, slot_num])
                    
    def circle_plus(x, y):
        return y | {(s, p) for (s, p) in x
                      if not {p1 for (s0, p1) in y if s0 == s}}

    def pmax(pvals):
        return {(s, p) for (b, s, p) in pvals
                if all(b1 <= b for (b1, s0, p1) in pvals if s0 == s)}

class Acceptor(DistProcess):
    def setup():
        ballot_num = -1   # bottom
        accepted = {}
        gc_slot = 0

    def main():
        output("the ballot number in acceptor")
        output(ballot_num)
        await(False)

    def OnP1a(lam, b, s):
        if b > ballot_num:   # there is no way that b == ballot_num is recvd
            ballot_num = b
        temp_accepted = {}
        for t_s,t_pval in temp_accepted.items():
            if (int(t_s)>int(s)):
                temp_accepted[t_s] = t_pval
        send(P1b(self, ballot_num, temp_accepted), lam)

    def OnP2a(lam, load):
        b, s, p = load
        if b >= ballot_num :
            ballot_num = b
            accepted[s]=(b,s,p)
        send(P2b(self, ballot_num), lam)
    
    def OnGcCollect(slot):
        if slot in accepted:
            #output("this one is gc collected "+str(slot))
            if(gc_slot < slot):
                del accepted[slot]
                gc_slot = slot
                
class Commander(DistProcess):
    def setup(lam, acceptors, replicas, load):
        waitfor = set(acceptors)
        b, s, p = load
        done = False

    def main():
        send(P2a(self, (b, s, p)), acceptors)
        await(done)

    def OnP2b(a, b1):
        if (b1 == b):
            if a in waitfor:
                waitfor.remove(a)
            if len(waitfor) < len(acceptors)/2:
                send(Decision(s, p), replicas)
                send(Decided(s),lam)
                done = True
        else:
            send(Preempted(b1), lam)
            done = True


class Scout(DistProcess):
    def setup(lam,acceptors,b,slot_num):
        waitfor = set(acceptors)
        pvalues_set = set()
        pvalues = {}
        done = False
        ballot_num = b
    def main():
        import time
        import random
        time.sleep(random.random())
        send(P1a(self, ballot_num, slot_num), acceptors)
        await(done)

    def OnP1b(a, b1, r):
        if b1 == ballot_num:            
            #pvalues |= r
            # iterate over r and for each r check if there
            # is a corresponding value in pvalues, that is older than 
            # the one received. 
            
            for slot,pval in r.items():
                # if slot present in pvalues
                print(slot)
                print(pval)
                temp_p = pvalues.get(slot)
                if (temp_p is None):
                        print('yes it was None')
                        pvalues[slot] = pval
                else:
                    balr,slr,pslr = pval
                    balp,slp,pslp = pvalues[slot]
                    if (int(balp) < int(balr)):
                        pvalues[slot] = pval
                    #else do nothing
            if a in waitfor:    
                waitfor.remove(a)
            if len(waitfor) < len(acceptors)/2:
                #pvalues_set = pvalues.values()
                for slt1,pval1 in pvalues.items():
                    pvalues_set.add(pval1)
                send(Adopted(b, pvalues_set), lam)
                done = True
        else:
            send(Preempted(b1), lam)
            done = True

class Client(DistProcess):
    def setup(replicas):
        cid = 0
        results = dict()
        count = dict()

    def main():
        while (True):
            send(Request((self, cid, randint(0, NOPS-1))), replicas)
            await(results.get(cid) != None and count.get(cid) == len(replicas))
            output("Received result %d:" % (cid)) 
            output(results[cid])
            cid += 1
            sleep(3)

    def OnResponse(cid, result):
        if results.get(cid) == None:
            results[cid] = result
            count[cid] = 1
        else:
            if results[cid] != result:
                output("Replicas out of sync at cid(%d) : %d - %d " %
                       (cid, results[cid], result))
                print(" ")
            else:
                count[cid] += 1

def main():
    nacceptors = 3
    nreplicas = 3
    nleaders = 1
    nclients = 4
    nops = 5

    use_channel("tcp")

    acceptors = createprocs(Acceptor, nacceptors, [])
    replicas = createprocs(Replica, nreplicas)
    #hbeats = createprocs(HeartBeat,1)
    #leaders = createprocs(Leader, 1, (acceptors, replicas))
    clients = createprocs(Client, nclients, (replicas,))
    myid = 1
    initial_state = {}
    initial_state["file0"] = 0
    initial_state["file1"] = 1
    initial_state["file2"] = 2
    initial_state["file3"] = 3
    initial_state["file4"] = 4
    for rep in replicas:
        setupprocs([rep], (acceptors,replicas-set([rep]), initial_state,rep,myid))
        myid = myid +1
    #setupprocs(hbeats,[replicas])
    setupprocs(acceptors,[])
    #The Replica assigned as leader, spawns a leader process.
    #setupprocs(leaders,[acceptors,replicas])
    setupprocs(clients,[replicas])
    startprocs(acceptors)
    #startprocs(replicas | leaders)
    startprocs(replicas)
    sleep(5)
    #inpt = input('Enter')
    startprocs(clients)
    #startprocs(hbeats) 
    #for p in acceptors | replicas | leaders | clients: p.join()
    for p in acceptors | replicas| clients : p.join()
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4 filetype=python
from random import randint
