# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4 filetype=python
from random import randint
from time import sleep
import sys
NOPS = 10                       # Number of operations of the state machine
operations = {i: (lambda state: (state+i,state+i)) for i in range(NOPS)}


class HeartBeat(DistProcess):
    def setup(replicas):
        t_s = 4
    
    def main():
        await(heartBeat() and False)   
    
    def heartBeat():
        output("this is the heart beat ")
        send(hb(),replicas)
        sleep(t_s)
        return False
    
class Replica(DistProcess):
    
    # the replica with myid=1 should spawn a leader and communicate
    # its identity to all other replicas..
    # so, in order to do that replica should be aware of all other replicas
    # also, replica should be aware of acceptors, as leader needs to know them
    #
    #
    def setup(acceptors,replicas,initial_state,myself,lmyid):
        self.lmyid = lmyid
        self.initialized = False
        self.leader = None
        self.isLeader = False
        self.state, self.slot_num = initial_state, 1
        self.proposals, self.decisions = set(), set()
        #mspawn(Scout, [self, acceptors, ballot_num,slot_num])
        #test ..
        output("len of acceptors "+str(len(acceptors)))
        output("len of replicas "+str(len(replicas)))
        output("initial_state "+str(initial_state))
        output("myself .. ")
        output(myself)
        output("myid .."+str(lmyid))

        if (self.lmyid == 1):
            leader = spawn(Leader,[acceptors, replicas])
            isLeader = True
    def main():
        if(lmyid == 1):
            await(leaderAnnounce() and False)
        else:
            await(False)
    def leaderAnnounce():
        if (lmyid==1):
            send(LeaderElect(leader),replicas-set([myself]))
        sleep(2)
        return False    
        # i am not the leader. So I should spawn a HeartBeat thread
        

    def Onhb():
        output("This is the heart beat that i was talking about")
    def OnLeaderElect(leader):
        output("I am told this is my leader"+str(leader));    
    def propose(p):
        if not {s for (s, p1) in decisions if p1 == p}:
            maxs = max({0} |
                       set(s for (s,p1) in proposals) |
                       set(s for (s,p1) in decisions))
            s1 = min(s for s in range(1, maxs + 1 + 1)
                     if not (set(p1 for (s0, p1) in proposals if s0 == s) |
                             set(p1 for (s0, p1) in decisions if s0 == s)))
            proposals.add((s1, p))
            send(Propose(s1, p), leaders)

    def perform(p):
        k, cid, op = p
        if {s for (s, p0) in decisions if p0 == p and s < slot_num}:
            slot_num += 1
        else:
            next, result = operations[op](state)
            state, slot_num = next, slot_num + 1
            send(Completed(slot_num),leaders)
            send(Response(cid, result), k)   
            #proposals = proposals - set([(s1,p1) for (s1,p1) in proposals if s1 < slot_num])
            #garbage collection
            #send(Performed(slot_num, p), leaders)
    def OnRequest(p):
	# check if it is the master?
	# if not respond with actual master identity,telling the CLient to invalidate the 
	# sequencer
        # check what type of request it is. 
	#If it is a read request,
	  # and if it is the master, read the dictionary and respond to the request
	  # else respond with the actual master identity.
	#If it is a tryLock try  
        propose(p)

    def OnDecision(s, p):
        decisions.add((s,p))
        while {p1 for (s0,p1) in decisions if s0==slot_num}:
            p1 = {p1 for (s0,p1) in decisions if s0==slot_num}.pop()
            for p2 in {p2 for (s0,p2) in proposals if s0==slot_num if p2 != p1}:
                propose(p2)
            perform(p1)

class Acceptor(DistProcess):
    def setup():
        ballot_num = -1   # bottom
        accepted = {}
        gc_slot = 0

    def main():
        output("the ballot number in acceptor")
        output(ballot_num)
        await(False)

    def OnP1a(lam, b, s):
        if b > ballot_num:   # there is no way that b == ballot_num is recvd
            ballot_num = b
        temp_accepted = {}
        for t_s,t_pval in temp_accepted.items():
            if (int(t_s)>int(s)):
                temp_accepted[t_s] = t_pval
        send(P1b(self, ballot_num, temp_accepted), lam)

    def OnP2a(lam, load):
        b, s, p = load
        if b >= ballot_num :
            ballot_num = b
            accepted[s]=(b,s,p)
        send(P2b(self, ballot_num), lam)
    
    def OnGcCollect(slot):
        if slot in accepted:
            #output("this one is gc collected "+str(slot))
            if(gc_slot < slot):
                del accepted[slot]
                gc_slot = slot
class Leader(DistProcess):
    def setup(acceptors,replicas):
        ballot_num = randint(0,500)
        ballot_num = ballot_num % 30 
        gc_collector = {} # a slot and count of number of leaders 
                          # that completed it 
        active = False
        proposals = set()
        slot_num = 0
        nreplicas = len(replicas)
 
    def main():
        spawn(Scout, [self, acceptors, ballot_num,slot_num])
        await(False)
   
    def OnPropose(s, p):
        if not {p1 for (s1, p1) in proposals if s1 == s}:
            proposals.add((s,p))
            if active:
                spawn(Commander, [self, acceptors, replicas, (ballot_num, s, p)])

    def OnAdopted(ballot_num_, pvals):
        if ballot_num == ballot_num_:
            proposals = circle_plus(proposals, pmax(pvals))
            for (s, p) in proposals:
                spawn(Commander, [self, acceptors, replicas, (ballot_num, s, p)])
            active = True
        #output(" I am adopted "+str(ballot_num))

    def OnDecided(slot):
        #output(" this slot was decided "+str(slot))
        slot_num = slot
    
    def OnCompleted(slot):
        #output("this slot was completed : "+str(slot))
        if slot in gc_collector:
            count = gc_collector[slot]
            if(count == nreplicas-1):
                del gc_collector[slot]
                #output("GC collecting slot "+str(slot))            
                send(GcCollect(slot),acceptors)
            else:
                gc_collector[slot] = count+1
        else:
                gc_collector[slot] = 1
    def OnPreempted(b):
        r1 = b
        #output(self)
        #output(str(ballot_num)+": I am preempted by"+str(b))
        #if b > ballot_num:
        active = False
        ballot_num = r1+1
        #output("retrying with "+str(ballot_num))
        spawn(Scout, [self, acceptors, ballot_num, slot_num])
            
    def circle_plus(x, y):
        return y | {(s, p) for (s, p) in x
                      if not {p1 for (s0, p1) in y if s0 == s}}

    def pmax(pvals):
        return {(s, p) for (b, s, p) in pvals
                if all(b1 <= b for (b1, s0, p1) in pvals if s0 == s)}


class Commander(DistProcess):
    def setup(lam, acceptors, replicas, load):
        waitfor = set(acceptors)
        b, s, p = load
        done = False

    def main():
        send(P2a(self, (b, s, p)), acceptors)
        await(done)

    def OnP2b(a, b1):
        if (b1 == b):
            if a in waitfor:
                waitfor.remove(a)
            if len(waitfor) < len(acceptors)/2:
                send(Decision(s, p), replicas)
                send(Decided(s),lam)
                done = True
        else:
            send(Preempted(b1), lam)
            done = True


class Scout(DistProcess):
    def setup(lam,acceptors,b,slot_num):
        waitfor = set(acceptors)
        pvalues_set = set()
        pvalues = {}
        done = False
        ballot_num = b
    def main():
        import time
        import random
        time.sleep(random.random())
        send(P1a(self, ballot_num, slot_num), acceptors)
        await(done)

    def OnP1b(a, b1, r):
        if b1 == ballot_num:            
            #pvalues |= r
            # iterate over r and for each r check if there
            # is a corresponding value in pvalues, that is older than 
            # the one received. 
            
            for slot,pval in r.items():
                # if slot present in pvalues
                print(slot)
                print(pval)
                temp_p = pvalues.get(slot)
                if (temp_p is None):
                        print('yes it was None')
                        pvalues[slot] = pval
                else:
                    balr,slr,pslr = pval
                    balp,slp,pslp = pvalues[slot]
                    if (int(balp) < int(balr)):
                        pvalues[slot] = pval
                    #else do nothing
            if a in waitfor:    
                waitfor.remove(a)
            if len(waitfor) < len(acceptors)/2:
                #pvalues_set = pvalues.values()
                for slt1,pval1 in pvalues.items():
                    pvalues_set.add(pval1)
                send(Adopted(b, pvalues_set), lam)
                done = True
        else:
            send(Preempted(b1), lam)
            done = True

class Client(DistProcess):
    def setup(replicas):
        cid = 0
        results = dict()
        count = dict()

    def main():
        while (True):
            send(Request((self, cid, randint(0, NOPS-1))), replicas)
            await(results.get(cid) != None and count.get(cid) == len(replicas))
            ##output("Received result %d:%d" % (cid, results[cid]))
            cid += 1
            #sleep(5)

    def OnResponse(cid, result):
        if results.get(cid) == None:
            results[cid] = result
            count[cid] = 1
        else:
            if results[cid] != result:
                ##output("Replicas out of sync at cid(%d) : %d - %d " %
                #       (cid, results[cid], result))
                print(" ")
            else:
                count[cid] += 1

def main():
    nacceptors = 3
    nreplicas = 3
    nleaders = 1
    nclients = 8
    nops = 5

    use_channel("tcp")

    acceptors = createprocs(Acceptor, nacceptors, [])
    replicas = createprocs(Replica, nreplicas)
    hbeats = createprocs(HeartBeat,1)
    leaders = createprocs(Leader, 1, (acceptors, replicas))
    clients = createprocs(Client, nclients, (replicas,))
    #setup(acceptors,replicas,initial_state,myid):

    myid = 1
    for rep in replicas:
        setupprocs([rep], (acceptors,replicas, 0,rep,myid))
        myid = myid +1
    setupprocs(hbeats,[replicas])
    setupprocs(acceptors,[])
    #The Replica assigned as leader, spawns a leader process.
    #setupprocs(leaders,[acceptors,replicas])
    #setupprocs(clients,[replicas])
    startprocs(acceptors)
    #startprocs(replicas | leaders)
    startprocs(replicas)
    #inpt = input('Enter')
    #startprocs(clients)
    #startprocs(hbeats) 
    #for p in acceptors | replicas | leaders | clients: p.join()
    for p in acceptors | replicas : p.join()
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4 filetype=python
from random import randint
